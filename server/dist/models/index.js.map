{"version":3,"sources":["../../server/models/index.js"],"names":["env","process","NODE_ENV","config","require","__dirname","basename","module","filename","db","sequelize","use_env_variable","database","username","password","readdirSync","filter","file","status","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate","Sequelize","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,SAASC,QAAWC,SAAX,gCAAiDL,GAAjD,CAAf;;AAEA,IAAMM,WAAW,eAAKA,QAAL,CAAcC,OAAOC,QAArB,CAAjB;;AAEA,IAAMC,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;;AAEA,IAAIP,OAAOQ,gBAAX,EAA6B;AAC3BD,cAAY,wBAAcT,QAAQD,GAAR,CAAYG,OAAOQ,gBAAnB,CAAd,CAAZ;AACD,CAFD,MAEO;AACLD,cAAY,wBAAcP,OAAOS,QAArB,EAA+BT,OAAOU,QAAtC,EAAgDV,OAAOW,QAAvD,EAAiEX,MAAjE,CAAZ;AACD;;AAED,aACGY,WADH,CACeV,SADf,EAEGW,MAFH,CAEU,UAACC,IAAD,EAAU;AAChB,MAAMC,SAAUD,KAAKE,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BF,SAASX,QAAvC,IACKW,KAAKG,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADvC;AAEA,SAAOF,MAAP;AACD,CANH,EAOGG,OAPH,CAOW,UAACJ,IAAD,EAAU;AACjB,MAAMK,QAAQZ,UAAUa,MAAV,CAAiB,eAAKC,IAAL,CAAUnB,SAAV,EAAqBY,IAArB,CAAjB,CAAd;AACAR,KAAGa,MAAMG,IAAT,IAAiBH,KAAjB;AACD,CAVH;;AAYAI,OAAOC,IAAP,CAAYlB,EAAZ,EAAgBY,OAAhB,CAAwB,UAACO,SAAD,EAAe;AACrC,MAAInB,GAAGmB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BpB,OAAGmB,SAAH,EAAcC,SAAd,CAAwBpB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGqB,SAAH;;AAEAvB,OAAOwB,OAAP,GAAiBtB,EAAjB","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\n\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(`${__dirname}/../../config/config.json`)[env];\n\nconst basename = path.basename(module.filename);\n\nconst db = {};\n\nlet sequelize;\n\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable]);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter((file) => {\n    const status = (file.indexOf('.') !== 0) && (file !== basename)\n                    && (file.slice(-3) === '.js');\n    return status;\n  })\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n"]}