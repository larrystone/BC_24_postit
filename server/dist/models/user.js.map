{"version":3,"sources":["../../server/models/user.js"],"names":["module","exports","sequelize","DataTypes","user","define","username","type","STRING","allowNull","unique","email","validate","isEmail","password","password_hasher","VIRTUAL","set","val","setDataValue","salt","isLongEnough","length","Error","phone","INTEGER","classMethods","associate","models","hasMany","message","foreignKey","as","group_user"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAACC,SAAD,EAAYC,SAAZ,EAA0B;AACzC,MAAMC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AACpCC,cAAU,EAAEC,MAAMJ,UAAUK,MAAlB;AACRC,iBAAW,KADH;AAERC,cAAQ,IAFA,EAD0B;AAIpCC,WAAO,EAAEJ,MAAMJ,UAAUK,MAAlB;AACLC,iBAAW,KADN;AAELC,cAAQ,IAFH;AAGLE,gBAAU;AACRC,iBAAS;AADD;AAHL,KAJ6B;AAWpCC,cAAU,EAAEP,MAAMJ,UAAUK,MAAlB;AACRC,iBAAW;AADH,KAX0B;AAcpCM,qBAAiB;AACfR,YAAMJ,UAAUa,OADD;AAEfC,WAAK,aAACC,GAAD,EAAS;AACZ,kBAAKC,YAAL,CAAkB,iBAAlB,EAAqCD,GAArC;AACA,kBAAKC,YAAL,CAAkB,UAAlB,EAA8B,UAAKC,IAAL,GAAYF,GAA1C;AACD,OALc;AAMfN,gBAAU;AACRS,sBAAc,sBAACH,GAAD,EAAS;AACrB,cAAIA,IAAII,MAAJ,GAAa,CAAjB,EAAoB;AAClB,kBAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;AACF;AALO;AANK,KAdmB;AA4BpCC,WAAOrB,UAAUsB;AA5BmB,GAAzB,EA6BV;AACDC,kBAAc;AACZC,iBAAW,mBAACC,MAAD,EAAY;AACrBxB,aAAKyB,OAAL,CAAaD,OAAOE,OAApB,EAA6B;AAC3BC,sBAAY,QADe;AAE3BC,cAAI;AAFuB,SAA7B;AAIA5B,aAAKyB,OAAL,CAAaD,OAAOK,UAApB,EAAgC;AAC9BF,sBAAY,QADkB,EAAhC;AAED;AARW;AADb,GA7BU,CAAb;;AA0CA,SAAO3B,IAAP;AACD,CA5CD","file":"user.js","sourcesContent":["module.exports = (sequelize, DataTypes) => {\n  const user = sequelize.define('user', {\n    username: { type: DataTypes.STRING,\n      allowNull: false,\n      unique: true },\n    email: { type: DataTypes.STRING,\n      allowNull: false,\n      unique: true,\n      validate: {\n        isEmail: true,\n      }\n    },\n    password: { type: DataTypes.STRING,\n      allowNull: false,\n    },\n    password_hasher: {\n      type: DataTypes.VIRTUAL,\n      set: (val) => {\n        this.setDataValue('password_hasher', val);\n        this.setDataValue('password', this.salt + val);\n      },\n      validate: {\n        isLongEnough: (val) => {\n          if (val.length < 7) {\n            throw new Error('Please choose a longer password');\n          }\n        }\n      }\n    },\n    phone: DataTypes.INTEGER\n  }, {\n    classMethods: {\n      associate: (models) => {\n        user.hasMany(models.message, {\n          foreignKey: 'userId',\n          as: 'messages',\n        });\n        user.hasMany(models.group_user, {\n          foreignKey: 'userId' });\n      },\n    }\n  });\n\n  return user;\n};\n"]}